# **Harjoitus 6**

Aloitin työt 13.00.


Harjoitustyön tehtävänantona käytettiin Karvisen kotisivuilta löytyvää [h6-kohtaa](https://terokarvinen.com/2021/linux-palvelimet-ict4tn021-3018/#h6)

**Harjoituksen laitekokoonpano**  
*Järjestelmänä Win 11 + VirtualBox 6.0 + Debian 11*  
  
*Koneen perustiedot:*  
*Suoritin: AMD Ryzen 9 5900HS 8-ytiminen 3,1 - 4,5 GHz, 16 Mt välimuisti*  
*Muisti: 16 Gt LPDDR4X*  
*Näytönohjain: NVIDIA GeForce RTX 3050 Ti 4 Gt GDDR6*  
*Kiintolevy: 512 Gt M.2 2230 NVMe PCIe 3.0 SSD*  

## a) Kaikki tehtävät arvioitavaksi. Palauta linkit kaikkiin kotitehtäväraportteihisi. Arviointi tehdään ensisijaisesti tästä linkistä
[Harjoitus 1](https://github.com/kalletolonen/linux_palvelimet/blob/main/tehtava1.md)
[Harjoitus 2](https://github.com/kalletolonen/linux_palvelimet/blob/main/tehtava2.md)
[Harjoitus 3](https://github.com/kalletolonen/linux_palvelimet/blob/main/tehtava3.md)
[Harjoitus 4]()
[Harjoitus 5]()
Harjoitus 6 on tämä harjoitus.

## b) Tarkista, että olet viitannut jokaisessa tehtävässä kaikkiin lähteisiin. Esimerkiksi kurssiin, tehtävänantoihin, käyttämiisi toisten kotitehtävärapotteihin, manuaalisivuihin, kotisivuihin...  
  
Tarkistin ja päivitin raporttini - päivitettyihin kohtiin merkitsin selkeästi, että niitä on päivitetty alkuperäisen päivityksen jälkeen. Versiohistoriasta voi tarvittaessa hankkia alkuperäisen palautuksen käyttöönsä.  
    
## c) Uusi komento Linuxiin. Tee uusi komento, joka tulostaa käyttäjälle hyödyllistä tietoa. Kokeile, että komento toimii kaikista hakemistoista ja muillakin käyttäjillä kuin omallasi.  
  
	micro hello

Tein komentoaihiooni sisällön. Taikakommentti (#! /usr/bin/bash) kertoo mikä ohjelma suorittaa shell-scriptin. Muut scriptissä olevat komennot ovat linuxin vakiokomentoja. Tiedostopäätteen antaminen ei ole pakollsita, joten en sellaista antanut.  
  
![Kuva 1.](pics/harjoitus_6/1.png)  
*hello-scriptin sisältö*  
  
	bash hello
	
Kokeilin scriptin toimivuutta ajamalla sen.  
  
![Kuva 2.](pics/harjoitus_6/2.png)  
*Scripti toimi, kun sen ajoi siinä kansiossa, jossa se sijaitsi.  
  
Muokkasin tiedoston käyttäjäoikeudet sellaisiksi, että scriptin saa kuka tahansa ajaa ja tarkistin että tekemäni muutokset tulivat voimaan.  
  
	sudo chmod ugo+x hello
	ls -ld hello

![Kuva 3.](pics/harjoitus_6/3.png)  
*Muutokset olivat voimassa*  
  
Seuraavaksi siirsin hello-tiedoston oikeaan kansioon, jotta sen pystyisi suorittamaan mistä tahansa. Siirto tuli tehdä sudo-oikeuksilla, sillä bin-kansion tiedostot ovat ajettavia ohjelmia ja sinne ei ole tavallisella käyttäjällä siirto-oikeuksia.  
  
	sudo cp hello /usr/local/bin/

![Kuva 4.](pics/harjoitus_6/4.png)  
*Tarkistin scriptin toimivuuden eri kansiosta ajamalla sen sieltä käsin*  
  
Tein uuden käyttäjän, jotta pääsisin testaamaan scriptiä toisella käyttäjällä.  
  
	sudo adduser testika
	
Syötin tarvittavat tiedot ja kirjauduin kallet-käyttäjällä ulos ja testika-käyttäjällä sisään.  
  
![Kuva 5.](pics/harjoitus_6/5.png)  
*Komento toimi myös toisella käyttäjällä*  
  
## d) Parametreja. Tee skripti, joka ottaa komentoriviparametreja. Esim. 'greetuser Tero' joka tulostaa "moi" ja parametrinä olevan nimen, esim "moi Tero".  
  
Päätin tehdä komentoriviltä toimivan python-scriptin, joka laskee käyttäjän painoindeksin.  
  
Ensin räpelsin kasaan koodin, joka toimii sellaisenaan, jotta pääsin käsittelemään parametrien tuomista komentorivistä erillisenä ongelmana, kun on sellaisenaan toimiva ohjelma.  
![Kuva 6.](pics/harjoitus_6/6.png)  
*Toimiva bmi-laskuri*  
  
![Kuva 7.](pics/harjoitus_6/7.png)  
*Tuote toimi ilman komentorivisyötteitä*  
  
Etsin [lähteen](https://www.geeksforgeeks.org/command-line-arguments-in-python/) komentorivisyötteen lukemiseksi ja muokkasin ohjelmaa sen perusteella. Tein myös kopion toimivasta koodistani komennolla:  
  
	cp bmi.py bmi2.py
	
![Kuva 8.](pics/harjoitus_6/8.png)  
*Uusi ohjelman sisältö*  
  
Aloitin toimivuuden testaamisen syöttämällä kaksi parametriä ja katsomalla siitä tapahtui.  
  
![Kuva 9.](pics/harjoitus_6/9.png)  
*Tulosteesta päättelin, että syötteen argumentti [0] ei ollut oikea paikka aloittaa*  
  
![Kuva 10.](pics/harjoitus_6/10.png)  
*Seuraava yritys*  
  
![Kuva 11.](pics/harjoitus_6/11.png)  
*Totesin, että ohjelma otti parametrit vastaan komentoriviltä*  
  
Muokkasin tiedostoon loput ohjelmastani ja testasin sitä.  
  
![Kuva 12.](pics/harjoitus_6/12.png)  
*Ohjelman sisältö*  
  
Tuloksena oli tietotyypistä annettu virheilmoitus.  
  
![Kuva 13.](pics/harjoitus_6/13.png)  
*Virheilmoituksen perusteella Python oletti saavansa potenssilaskuun numerotyyppistä tietoa, mutta saikin int/str-tyyppistä*  
  
Tein siis tyyppimuunnoksen samalla, kun tallensin komentoriltä tulleet parametrit muuttujiin.  
  
![Kuva 14.](pics/harjoitus_6/14.png)  
*Muutetut kohdat ohjelmassani*  
  
![Kuva 15.](pics/harjoitus_6/15.png)  
*Ohjelma toimi testattaessa*  
  
Tein vielä huvikseni ohjelmasta sellaisen version, jota pystyi ajamaan mistä tahansa järjestelmässä ja kenen tahansa toimesta.   
  
1. Muokkasin tiedoston nimeä: *mv bmi.py bmi*  
2. Muokkasin ajo-oikeuksia: *sudo chmod ugo+x bmi*  
3. Siirsin tiedoston bin-kansioon: *sudo cp bmi /usr/local/bin/
  

![Kuva 16.](pics/harjoitus_6/16.png)  
*Kokeilu tuotti virheilmoituksen pythonin sijainnista*  
  
Selvitin ongelmaa ja lopulta ratkaisin sen, sillä minulla oli virhe bmi-tiedoston shebangissä, eli taikakommentissa.  
  
![Kuva 17.](pics/harjoitus_6/17.png)  
*Muokkasin shebangiin oikean hakemiston (/-merkki puuttui alusta)  
  
![Kuva 18.](pics/harjoitus_6/18.png)  
*Komento toimi eri hakemistoista*  
  
![Kuva 19.](pics/harjoitus_6/19.png)  
*Komento toimi myös toisella käyttäjällä*  
  
Lopetin työt 14.55.  
  
## e) Ratkaise valitsemasi vanha arvioitava laboratorioharjoitus tältä kurssilta. (Löytyy DuckDuckGolla, Googlella, linkeistä tältä sivulta tai hakemalla yläreunan hakutoiminnolla). Sovella tarvittaessa tehtäviä tähän toteutukseen sopivaksi, esimerkiksi PHP:n tilalta voi tehdä vastaavan Pythonilla; Flaskin tilalta käyttää Djangoa. Tai jättää pois jonkin epärelevantin kohdan.  
  
Aloitin työt 16.41.  
  
Valitsin toteutettavaksi labraharjoitukseksi Karvisen sivuilta tehtävän: [https://terokarvinen.com/2017/arvioitava-laboratorioharjoitus-linux-palvelimet-ict4tn021-4-tiistai-alkusyksy-2017-5-op/](https://terokarvinen.com/2017/arvioitava-laboratorioharjoitus-linux-palvelimet-ict4tn021-4-tiistai-alkusyksy-2017-5-op/)  
  
Aloitin työt tekemällä uuden, tyhjän virtualikoneen, kun olin ensin selaillut tehtävänantoa pintapuolisesti.  
  
![Kuva 20.](pics/harjoitus_6/20.png)  
*Virtuaalikone ruksutteli live-usb:tä käyntiin*  
  
LAbratehtävän tehtävänannossa sanottiin: "Kehittäjämme haluavat käyttää LAMP (Linux Apache MySQL PHP) -pinoa. Asenna tarvittavat ohjelmistot ja tee tietokantaa käyttävä esimerkkiohjelma."  
  
Päätin soveltaa pinoa sen verran, että vaihdoin SQLiten ja Pythonin/Djangon kahden viimeisen tilalle.  
  
Live-tila ei valitettavasti lähtenyt toimimaan virtuaalikoneessani (eikä tuottanut mitään mustaa ruutua kummempaa virhetietoa), joten päätin kokeilla asennusohjelman käynnistämistä suoraan.  
  
### Käyttäjät  
  
Ensimmäiseksi päätin asentaan salasanamanagerin, jotta saisin hyvät salasanat käyttäjille muistiin harjoitusta varten. Pass-sovelluksen asennusta yrittäessäni huomisin, että repositorioita ei tullut esiasennettuina Debianin CLI-asennuksessa, joten päätin vetää asennuksen sileäksi ja aloittaa alusta, koska se olisi varmasti nopeampi tie kuin niiden asettaminen googlaamisen lisäksi kerralla oikein.  
  
![Kuva 21.](pics/harjoitus_6/21.png)  
*Toisella virtuaalikoneella, joka oli asennettu "livenä", oli reposioriot kohdillaan ja asennus onnistui*  
  
Toisella asennuskerralla päätin antaa "liven" ladata itseään käyntiin ainakin vartin. Kärismättömyyteni paljastui syyksi siihen, että "live"-asennus ei ollut toiminut, se olisi tarvinnut vain enemmän aikaa ladatakseen itsensä.  
  
Latasin pass-salasanamanagerin, gpg-avaingeneraattorin [työohjeella](https://keyring.debian.org/creating-key.html) ja pwgenin salasanojen generoimiseksi:  

*sudo apt-get update*  
*sudo apt-get install -y pass*  
*sudo apt-get install -y pwgen*  
*sudo apt-get install -y gnupg2*  
*gpg --list-keys --with-subkey-fingerprint* <-Näyttää gpg-avaimet  
*gpg --gen-key --default-new-key-algo=rsa4096/cert,sign+rsa4096/encr* <-Generoi gpg-avaimen  
  
Näiden komentojen jälkeen gpg kysyi passphrasea generointia varten ja annoin sellaisen.  
  
![Kuva 22.](pics/harjoitus_6/22.png)  
*Komento saatiin suoritettua*  
  
Sitten en enää ymmärtänyt mitä olisi seuraavaksi pitänyt tehdä, sillä ohjeen serverille lähetettävä avain esiintyy ohjeessa vain kerran - lähetyskäskyn yhteydessä. Niin siis että mikä avain lähetetään mihin ja miksi?  
  
Päätin käyttää harjoituksen salasanojen tallentamiseen Firefoxin salasanamanageria, sillä se oli ainakin helppokäyttöinen. Tähän harjoitustehtävään se oli varmasti myös tarpeeksi tietoturvallinen vaihtoehto - salasanat eivät olleet missään muussa käytössä kuin virtuaalikoneen sisällä olevilla kuvitteellisilla käyttäjillä.  
  
**Käyttäjät**  
"Nakke Nertola, Håkan Värs, Einari Mikkonen, Einari Öljysaari ja Eija Vähäkäähkä"  

Tein heille tunnuksien tekemistä varten scriptin, joka nappaa 3 ensimmäistä kirjainta etu- ja sukunimistä ja tekee niistä käyttäjätunnuksen - tiesin jo tähän ryhtyessäni, että tähän menee 10 kertaisesti se aika mitä menisi asioiden tekemiseen käsin, mutta kokeilemalla oppinee enemmän.  
  
Asensin Micron:  
*sudo apt-get install -y micro*  

Tein skriptikansion:  
*mkdir scripts*  
  
päivitin järjestelmän, koska olin unohtanut tehdä sen alussa:  
*sudo apt-get upgrade*  
  
Lähdin rakentamaan käyttäjänimigeneraattoriani lähteiden [1](https://stackoverflow.com/questions/3194516/replace-special-characters-with-ascii-equivalent) ja [2](https://stackoverflow.com/questions/35964691/generating-username-using-python) perusteella.  
  
````
koodi jonka pohjalle rakensin nimen pilkkomisen osiin:  
  
full_name = input("Please enter your name: ")
first_letter = full_name[0]
space_index = full_name.find(" ")
three_letters_surname = full_name[space_index + 1:space_index + 4]
number = random.randrange (1,999)
username = (first_letter, three_letters_surname, number)
print = (username)
  
Koodi ääkköseten korvaamiseksi:  
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import unicodedata
text = u'Cześć'
print unicodedata.normalize('NFD', text).encode('ascii', 'ignore')

````
  
![Kuva 23.](pics/harjoitus_6/23.png)  
*Muokattu koodi*  
  
![Kuva 24.](pics/harjoitus_6/24.png)  
*Ääkkösten muokkaaminen unix-ystävällisemmiksi onnistui*  
  
![Kuva 25.](pics/harjoitus_6/25.png)  
*Uusi sisältö scriptissä*  
  
![Kuva 26.](pics/harjoitus_6/26.png)  
*Ensimmäinen while-looppi käy nimet läpi ja lisää ne listaan ilman ääkkösiä ja muita kummallisuuksia*  
  
![Kuva 27.](pics/harjoitus_6/27.png)  
*Toinen while-looppi pätkii nimet ja tekee niistä "3 kirjainta + 3 kirjainta + 1 numero"-tyylisiä käyttäjätunnusaihioita
  






  
  
  
  
  
  
  
  
  
Seuraavaksi generoin viidelle käyttäjälle satunnaiset, 12 merkkiä pitkät salasanat:  
*pwgen -s 12 5*  
		

  


Loin käyttäjät adduser-komennolla. Käytin käyttäjätunnuksen luomiseksi kaavaa: 3 ensimmäistä kirjainta etunimestä ja 3 ensimmäistä kirjainta sukunimestä. Ääkköset korvasin lähimmällä vastaavuudella. 
  
´```
sudo adduser tunnus
````  
  

  
## f) Tee uusi tyhjä virtuaalikone (tai oikea kone) viimeisen kerran arvioitavaa labraa varten. Koneella ei saa olla luottamuksellisia tietoja. Kannattaa tehdä koneelle tarpeeksi iso virtuaalinen levy ja laittaa riittävästi RAM:ia. Guest additions saa olla asennettuna. Koneella ei saa olla muita asetuksia ennakkoon, eikä ylimääräisiä asennettuja ohjelmia.


  

  



